<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace airbyte\airbyte_oss;

/**
 * SDK - Airbyte Configuration API: Airbyte Configuration API
 * 
 * [https://airbyte.io](https://airbyte.io).
 * 
 * This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.
 * 
 * Here are some conventions that this API follows:
 * * All endpoints are http POST methods.
 * * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params.
 * * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`.
 * * For all `update` methods, the whole object must be passed in, even the fields that did not change.
 * 
 * Authentication (OSS):
 * * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': "Basic YWlyYnl0ZTpwYXNzd29yZA=="`
 * 
 * https://airbyte.io - Find out more about Airbyte
 * 
 * @package airbyte\airbyte_oss
 * @access public
 * @see https://airbyte.io
 */
class SDK
{
	public const SERVERS = [
		'http://localhost:8000/api',
	];
  	
    /**
     * Interactions with attempt related resources.
     * 
     * @var Attempt $$attempt
     */
	public Attempt $attempt;
	
    /**
     * Connection between sources and destinations.
     * 
     * @var Connection $$connection
     */
	public Connection $connection;
	
    /**
     * Destination related resources.
     * 
     * @var Destination $$destination
     */
	public Destination $destination;
	
    /**
     * DestinationDefinition related resources.
     * 
     * @var DestinationDefinition $$destinationDefinition
     */
	public DestinationDefinition $destinationDefinition;
	
    /**
     * DestinationDefinitionSpecification related resources.
     * 
     * @var DestinationDefinitionSpecification $$destinationDefinitionSpecification
     */
	public DestinationDefinitionSpecification $destinationDefinitionSpecification;
	
    /**
     * Source OAuth related resources to delegate access from user.
     * 
     * @var DestinationOauth $$destinationOauth
     */
	public DestinationOauth $destinationOauth;
	
    /**
     * Healthchecks
     * 
     * @var Health $$health
     */
	public Health $health;
	
	public Internal $internal;
	
	public Jobs $jobs;
	
	public Logs $logs;
	
	public Notifications $notifications;
	
	public Openapi $openapi;
	
	public Operation $operation;
	
	public Scheduler $scheduler;
	
    /**
     * Source related resources.
     * 
     * @var Source $$source
     */
	public Source $source;
	
    /**
     * SourceDefinition related resources.
     * 
     * @var SourceDefinition $$sourceDefinition
     */
	public SourceDefinition $sourceDefinition;
	
    /**
     * SourceDefinition specification related resources.
     * 
     * @var SourceDefinitionSpecification $$sourceDefinitionSpecification
     */
	public SourceDefinitionSpecification $sourceDefinitionSpecification;
	
    /**
     * Source OAuth related resources to delegate access from user.
     * 
     * @var SourceOauth $$sourceOauth
     */
	public SourceOauth $sourceOauth;
	
    /**
     * Interactions with state related resources.
     * 
     * @var State $$state
     */
	public State $state;
	
    /**
     * Endpoints for the Airbyte web application. Those APIs should not be called outside the web application implementation and are not
     * 
     * guaranteeing any backwards compatibility.
     * 
     * 
     * @var WebBackend $$webBackend
     */
	public WebBackend $webBackend;
	
    /**
     * Workspace related resources.
     * 
     * @var Workspace $$workspace
     */
	public Workspace $workspace;
		
	private SDKConfiguration $sdkConfiguration;

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param SDKConfiguration $sdkConfiguration
	 */
	public function __construct(SDKConfiguration $sdkConfiguration)
	{
		$this->sdkConfiguration = $sdkConfiguration;
		
		$this->attempt = new Attempt($this->sdkConfiguration);
		
		$this->connection = new Connection($this->sdkConfiguration);
		
		$this->destination = new Destination($this->sdkConfiguration);
		
		$this->destinationDefinition = new DestinationDefinition($this->sdkConfiguration);
		
		$this->destinationDefinitionSpecification = new DestinationDefinitionSpecification($this->sdkConfiguration);
		
		$this->destinationOauth = new DestinationOauth($this->sdkConfiguration);
		
		$this->health = new Health($this->sdkConfiguration);
		
		$this->internal = new Internal($this->sdkConfiguration);
		
		$this->jobs = new Jobs($this->sdkConfiguration);
		
		$this->logs = new Logs($this->sdkConfiguration);
		
		$this->notifications = new Notifications($this->sdkConfiguration);
		
		$this->openapi = new Openapi($this->sdkConfiguration);
		
		$this->operation = new Operation($this->sdkConfiguration);
		
		$this->scheduler = new Scheduler($this->sdkConfiguration);
		
		$this->source = new Source($this->sdkConfiguration);
		
		$this->sourceDefinition = new SourceDefinition($this->sdkConfiguration);
		
		$this->sourceDefinitionSpecification = new SourceDefinitionSpecification($this->sdkConfiguration);
		
		$this->sourceOauth = new SourceOauth($this->sdkConfiguration);
		
		$this->state = new State($this->sdkConfiguration);
		
		$this->webBackend = new WebBackend($this->sdkConfiguration);
		
		$this->workspace = new Workspace($this->sdkConfiguration);
	}
}