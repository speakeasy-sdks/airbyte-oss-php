<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace airbyte\airbyte_oss\Models\Shared;


/**
 * DestinationDefinitionRead - Successful operation
 * 
 * @package airbyte\airbyte_oss\Models\Shared
 * @access public
 */
class DestinationDefinitionRead
{
	#[\JMS\Serializer\Annotation\SerializedName('destinationDefinitionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $destinationDefinitionId;
    
	#[\JMS\Serializer\Annotation\SerializedName('dockerImageTag')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $dockerImageTag;
    
	#[\JMS\Serializer\Annotation\SerializedName('dockerRepository')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $dockerRepository;
    
	#[\JMS\Serializer\Annotation\SerializedName('documentationUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $documentationUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('icon')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $icon = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * describes a normalization config for destination definition
     * 
     * @var \airbyte\airbyte_oss\Models\Shared\NormalizationDestinationDefinitionConfig $normalizationConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('normalizationConfig')]
    #[\JMS\Serializer\Annotation\Type('airbyte\airbyte_oss\Models\Shared\NormalizationDestinationDefinitionConfig')]
    public NormalizationDestinationDefinitionConfig $normalizationConfig;
    
    /**
     * The Airbyte Protocol version supported by the connector
     * 
     * @var ?string $protocolVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('protocolVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $protocolVersion = null;
    
    /**
     * The date when this connector was first released, in yyyy-mm-dd format.
     * 
     * @var ?\DateTime $releaseDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('releaseDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $releaseDate = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('releaseStage')]
    #[\JMS\Serializer\Annotation\Type('enum<airbyte\airbyte_oss\Models\Shared\ReleaseStage>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReleaseStage $releaseStage = null;
    
    /**
     * actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     * 
     * @var ?\airbyte\airbyte_oss\Models\Shared\ActorDefinitionResourceRequirements $resourceRequirements
     */
	#[\JMS\Serializer\Annotation\SerializedName('resourceRequirements')]
    #[\JMS\Serializer\Annotation\Type('airbyte\airbyte_oss\Models\Shared\ActorDefinitionResourceRequirements')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ActorDefinitionResourceRequirements $resourceRequirements = null;
    
    /**
     * an optional flag indicating whether DBT is used in the normalization. If the flag value is NULL - DBT is not used.
     * 
     * @var bool $supportsDbt
     */
	#[\JMS\Serializer\Annotation\SerializedName('supportsDbt')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $supportsDbt;
    
	public function __construct()
	{
		$this->destinationDefinitionId = "";
		$this->dockerImageTag = "";
		$this->dockerRepository = "";
		$this->documentationUrl = "";
		$this->icon = null;
		$this->name = "";
		$this->normalizationConfig = new \airbyte\airbyte_oss\Models\Shared\NormalizationDestinationDefinitionConfig();
		$this->protocolVersion = null;
		$this->releaseDate = null;
		$this->releaseStage = null;
		$this->resourceRequirements = null;
		$this->supportsDbt = false;
	}
}
