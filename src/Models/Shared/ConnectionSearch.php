<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace airbyte\airbyte_oss\Models\Shared;


class ConnectionSearch
{
	#[\JMS\Serializer\Annotation\SerializedName('connectionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $connectionId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('destination')]
    #[\JMS\Serializer\Annotation\Type('airbyte\airbyte_oss\Models\Shared\DestinationSearch')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DestinationSearch $destination = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('destinationId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $destinationId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Method used for computing final namespace in destination
     * 
     * @var ?\airbyte\airbyte_oss\Models\Shared\NamespaceDefinitionTypeEnum $namespaceDefinition
     */
	#[\JMS\Serializer\Annotation\SerializedName('namespaceDefinition')]
    #[\JMS\Serializer\Annotation\Type('enum<airbyte\airbyte_oss\Models\Shared\NamespaceDefinitionTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NamespaceDefinitionTypeEnum $namespaceDefinition = null;
    
    /**
     * Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     * 
     * @var ?string $namespaceFormat
     */
	#[\JMS\Serializer\Annotation\SerializedName('namespaceFormat')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $namespaceFormat = null;
    
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination.
     * 
     * @var ?string $prefix
     */
	#[\JMS\Serializer\Annotation\SerializedName('prefix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $prefix = null;
    
    /**
     * if null, then no schedule is set.
     * 
     * @var ?\airbyte\airbyte_oss\Models\Shared\ConnectionSchedule $schedule
     */
	#[\JMS\Serializer\Annotation\SerializedName('schedule')]
    #[\JMS\Serializer\Annotation\Type('airbyte\airbyte_oss\Models\Shared\ConnectionSchedule')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConnectionSchedule $schedule = null;
    
    /**
     * schedule for when the the connection should run, per the schedule type
     * 
     * @var ?\airbyte\airbyte_oss\Models\Shared\ConnectionScheduleData $scheduleData
     */
	#[\JMS\Serializer\Annotation\SerializedName('scheduleData')]
    #[\JMS\Serializer\Annotation\Type('airbyte\airbyte_oss\Models\Shared\ConnectionScheduleData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConnectionScheduleData $scheduleData = null;
    
    /**
     * determine how the schedule data should be interpreted
     * 
     * @var ?\airbyte\airbyte_oss\Models\Shared\ConnectionScheduleTypeEnum $scheduleType
     */
	#[\JMS\Serializer\Annotation\SerializedName('scheduleType')]
    #[\JMS\Serializer\Annotation\Type('enum<airbyte\airbyte_oss\Models\Shared\ConnectionScheduleTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConnectionScheduleTypeEnum $scheduleType = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('source')]
    #[\JMS\Serializer\Annotation\Type('airbyte\airbyte_oss\Models\Shared\SourceSearch')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SourceSearch $source = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('sourceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceId = null;
    
    /**
     * Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
     * 
     * @var ?\airbyte\airbyte_oss\Models\Shared\ConnectionStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<airbyte\airbyte_oss\Models\Shared\ConnectionStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConnectionStatusEnum $status = null;
    
	public function __construct()
	{
		$this->connectionId = null;
		$this->destination = null;
		$this->destinationId = null;
		$this->name = null;
		$this->namespaceDefinition = null;
		$this->namespaceFormat = null;
		$this->prefix = null;
		$this->schedule = null;
		$this->scheduleData = null;
		$this->scheduleType = null;
		$this->source = null;
		$this->sourceId = null;
		$this->status = null;
	}
}
